


src\main\java\com\example\demo\DemoApplication.java:3: error: package org.springframework.boot does not exist
import org.springframework.boot.SpringApplication;
                               ^
src\main\java\com\example\demo\DemoApplication.java:4: error: package org.springframework.boot.autoconfigure does not exist
import org.springframework.boot.autoconfigure.SpringBootApplication;
                                             ^
src\main\java\com\example\demo\DemoApplication.java:6: error: cannot find symbol
@SpringBootApplication
 ^
  symbol: class SpringBootApplication
src\main\java\com\example\demo\DemoApplication.java:10: error: cannot find symbol
                SpringApplication.run(DemoApplication.class, args);
                ^
  symbol:   variable SpringApplication
  location: class DemoApplication
4 errors



The compiler compliance specified is 1.8 but a JRE 20 is used

Build path specifies execution environment JavaSE-1.8. There are no JREs installed in the workspace that are strictly compatible with this environment. 




Java20 
JRE20
compiler maven 1.8
application Runtime 11


Please allow me to explain my work via the next thank you 

------------------
 
 4


Create an ECR repo on AWS via cmd or console
cmd = aws ecr create-repository --repository-name <repository-name>


Build and Push Docker Image to ECR in AWS --- for my Visual studio code in had Dockerhub add on so this pushed in my docker repo. however for AWS

# Build the Docker image
docker build -t <image-name>:<tag> <path-to-dockerfile>

# Authenticate Docker to the ECR repository
aws ecr get-login-password --region <region> | docker login --username AWS --password-stdin <aws-account-id>.dkr.ecr.<region>.amazonaws.com

# Tag the Docker image
docker tag <image-name>:<tag> <aws-account-id>.dkr.ecr.<region>.amazonaws.com/<repository-name>:<tag>

# Push the Docker image to ECR
docker push <aws-account-id>.dkr.ecr.<region>.amazonaws.com/<repository-name>:<tag>


Create an Application and Deployment Group in CodeDeploy:
aws deploy create-application --application-name <application-name>
aws deploy create-deployment-group --application-name <application-name> 

Create Deployment 
aws deploy create-deployment --application-name <application-name> --deployment-group-name <deployment-group-name> --revision revisionType=ECR,imageName=<aws-account-id>.dkr.ecr.<region>.amazonaws.com/<repository-name>:<tag> --deployment-config-name CodeDeployDefault.OneAtATime



Us use the full Pipeline you use many sources ro trigger the pipeling 
https://docs.aws.amazon.com/codepipeline/latest/userguide/reference-pipeline-structure.html 

 for example you push a container image to a private Amazon ECR repository for the first time using the Docker CLI and the AWS CLI.
 https://docs.aws.amazon.com/AmazonECR/latest/userguide/getting-started-cli.html#cli-push-image
 
 
 
 






